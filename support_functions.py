# -*- coding: utf-8 -*-"""Created on Fri Sep 23 20:02:48 2022@author: Ahmed"""import osimport numpy as npimport tensorflow as tffrom scipy.io import loadmatimport matplotlib.pyplot as pltfrom PIL import Imageimport warnings warnings.filterwarnings("ignore")# Make a predictiondef predict_image(image, model=None):    processed_image = np.array(Image.fromarray(image.astype(np.uint8)).resize((512,512))).astype('float32')    processed_image = np.array(processed_image)/127.5 - 1.    if processed_image.ndim == 3:        processed_image = np.expand_dims(processed_image, 0)    if model is None:        model = tf.keras.models.load_model('saved_model/generator.h5')    pred = model.predict(processed_image)    pred = np.round((pred+1.0)*127.5).astype(int)[0]    pred = np.array(Image.fromarray(pred.astype(np.uint8)).convert('L').resize(image.shape[:2][::-1])).astype('int')    return pred# Read all the labels from the filepath = os.path.join(os.getcwd(), r"label_list")data = loadmat(path)original_labels = list(data.items())[3][1][0]original_labels = [label[0] for label in original_labels]new_labels = {    'background': ['null'],	'accessories': ['accessories','bag','belt','bra','bracelet','earrings','glasses','gloves','hat','necklace','purse', 'ring','scarf','sunglasses','tie','wallet','watch'],	'shirt': ['shirt','sweatshirt','jacket','blazer', 'bodysuit', 'blouse', 'cape', 'cardigan','coat','hoodie','sweater','t-shirt','top', 'vest','suit'],	'shoes': ['shoes','boots','clogs','heels', 'loafers','pumps','sandals','sneakers','socks','wedges'] ,	'dress': [ 'dress', 'flats', 'intimate','jumper','romper','skirt','swimwear'],	'hair': ['hair'],	'pants': ['jeans','leggings','panties','pants','shorts','stockings','tights'],	'skin': ['skin']    }def generate_mapping(original_labels=original_labels, new_labels=new_labels):    mapping = {}    new_labels_list = list(new_labels.keys())    for new_label, old_list in new_labels.items():        for old_label in old_list:            old_index = original_labels.index(old_label)            new_index = new_labels_list.index(new_label)            mapping[old_index] = new_index    return mapping, new_labels_listmapping, new_labels_list = generate_mapping()           # This function can be used in mapping the old labels to the new valuesdef relabel(image, mapping=mapping):    k = np.array(list(mapping.keys()))    v = np.array(list(mapping.values()))    out = np.zeros_like(image)    for key,val in zip(k,v):        out[image==key] = val    return out # This function is used to validate that the output is a correct label# If not, it'll convert it into 0def validate_segmentation(segmented_image, labels_list=new_labels_list):    segmented_image[segmented_image>len(labels_list)-1]=0    return segmented_image# This function will plot only the masked item and return everything else balnkdef plot_item(item, image, label_image, labels=new_labels_list):    label = labels.index(item)    masked_image = image.copy()    masked_image[label_image!=label] = [255,255,255]    plt.imshow(masked_image)    plt.title(item)    return masked_image# This function will plot each item in one imagedef master_plot(image, segmented_image, label_names=new_labels_list):    if segmented_image.ndim >2:        segmented_image = np.array(Image.fromarray(segmented_image.astype(np.uint8)).convert('L')).astype('int')    available_labels = np.unique(segmented_image)    plt.imshow(image)    plt.title("Original Image")    plt.axis('off')    plt.show();    for i in range(len(available_labels)):        masked_image = image.copy()        masked_image[segmented_image!=available_labels[i]] = [255,255,255]        plt.imshow(masked_image)        plt.title(label_names[available_labels[i]])        plt.axis('off')        plt.show();model = tf.keras.models.load_model('saved_model/generator.h5')path = os.path.join(os.getcwd(), r"dataset\annotations")all_files = os.listdir(path)# This function will test a random image from the dataloaderdef random_test():    # Getting an image for testing the model    photo_index = np.random.choice(len(all_files))    test_label = os.path.join(os.getcwd(), r"dataset\annotations", all_files[photo_index])    original_segmented_image = loadmat(test_label)["groundtruth"].astype(float)    original_segmented_image = np.array(Image.fromarray(original_segmented_image.astype(np.uint8)).convert('RGB')).astype('int')     original_segmented_image = relabel(original_segmented_image)    test_image = os.path.join(os.getcwd(), r"dataset\photos", all_files[photo_index].replace("mat", "jpg"))    original_image = plt.imread(test_image)    # original_segmented_image = ((imgs_B[0]+1.0)*127.5).astype(int)    predicted_segmented_image = predict_image(original_image, model=model)    predicted_segmented_image = validate_segmentation(predicted_segmented_image)    print("Here's the original segmentation")    master_plot(original_image, original_segmented_image)    print("\nHere's our predicted segmentation")    master_plot(original_image, predicted_segmented_image)#     plt.imshow(((imgs_A[0]+1.0)*127.5).astype(int));#     # Generating the mask# pred = gan.generator.predict(imgs_A)# # plotting the prediction# plt.imshow(((pred[0]+1.0)*127.5).astype(int))# # Original original segmentation# plt.imshow(((imgs_B[0]+1.0)*127.5).astype(int));# # # np.unique(((imgs_B[0]+1.0)*127.5).astype(int))# # # np.unique(((pred[0]+1.0)*127.5).astype(int))# Testing on a sample image# # Test an image with its label# # Choose a random number# photo_index = 1# # Get and plot the segemnted image# path = os.path.join(os.getcwd(), r"dataset\annotations")# all_files = os.listdir(path)# test_label = os.path.join(os.getcwd(), r"dataset\annotations", all_files[photo_index])# label_image = loadmat(test_label)["groundtruth"]# label_image = relabel(label_image)# plt.imshow(label_image)# # Get and plot the original image itself# test_image = os.path.join(os.getcwd(), r"dataset\photos", all_files[photo_index].replace("mat", "jpg"))# original_image = plt.imread(test_image)# plt.imshow(original_image)# master_plot(original_image, label_image, label_names=new_labels_list)